const convertPastParticipleToPresent = require('../../convertPastParticipleToPresent');
const expect = require('../expect');

describe('convertPastParticipleToPresent', () => {
  it('', () => {
    const map = {
      // cancelled: 'cancel',
      // succeeded: 'succeed',
      // taxed: 'tax',
      // treated: 'treat',
      adopted: 'adopt',
      agreed: 'agree',
      announced: 'announce',
      // appealed: 'appeal',
      armed: 'arm',
      arrested: 'arrest',
      asked: 'ask',
      assisted: 'assist',
      based: 'base',
      belonged: 'belong',
      blocked: 'block',
      called: 'call',
      captured: 'capture',
      carried: 'carry',
      charged: 'charge',
      coined: 'coin',
      complained: 'complain',
      considered: 'consider',
      continued: 'continue',
      demanded: 'demand',
      denied: 'deny',
      deployed: 'deploy',
      displayed: 'display',
      doubled: 'double',
      dropped: 'drop',
      emerged: 'emerge',
      enacted: 'enact',
      ended: 'end',
      escaped: 'escape',
      established: 'establish',
      estimated: 'estimate',
      expressed: 'express',
      failed: 'fail',
      filed: 'file',
      followed: 'follow',
      formed: 'form',
      freed: 'free',
      generated: 'generate',
      happened: 'happen',
      helped: 'help',
      hosted: 'host',
      included: 'include',
      inherited: 'inherit',
      intended: 'intend',
      involved: 'involve',
      joined: 'join',
      killed: 'kill',
      lasted: 'last',
      launched: 'launch',
      moved: 'move',
      opened: 'open',
      ordered: 'order',
      planned: 'plan',
      postponed: 'postpone',
      prohibited: 'prohibit',
      proposed: 'propose',
      provided: 'provide',
      ratified: 'ratify',
      received: 'receive',
      recorded: 'record',
      referred: 'refer',
      replaced: 'replace',
      ruled: 'rule',
      secured: 'secure',
      selected: 'select',
      sentenced: 'sentence',
      specified: 'specify',
      started: 'start',
      stated: 'state',
      studied: 'study',
      sued: 'sue',
      suffered: 'suffer',
      talked: 'talk',
      tested: 'test',
      traced: 'trace',
      used: 'use',
      verified: 'verify',
      waged: 'wage',
      worked: 'work',
    };
    // eslint-disable-next-line no-restricted-syntax
    for (const [key, value] of Object.entries(map)) {
      expect(convertPastParticipleToPresent(key)).to.equal(value);
    }
  });
});
