const convertPastParticipleToPresent = require('../../utils/convertPastParticipleToPresent');
const expect = require('../expect');

describe('convertPastParticipleToPresent', () => {
  it('converts', () => {
    const map = {
      adopted: 'adopt',
      affected: 'affect',
      agreed: 'agree',
      announced: 'announce',
      appealed: 'appeal',
      approached: 'approach',
      armed: 'arm',
      arrested: 'arrest',
      asked: 'ask',
      assisted: 'assist',
      based: 'base',
      belonged: 'belong',
      blocked: 'block',
      called: 'call',
      canceled: 'cancel',
      cancelled: 'cancel',
      captured: 'capture',
      carried: 'carry',
      caused: 'cause',
      charged: 'charge',
      closed: 'close',
      coined: 'coin',
      collapsed: 'collapse',
      compared: 'compare',
      complained: 'complain',
      composed: 'compose',
      considered: 'consider',
      continued: 'continue',
      demanded: 'demand',
      denied: 'deny',
      deployed: 'deploy',
      described: 'describe',
      developed: 'develop',
      displayed: 'display',
      divided: 'divide',
      doubled: 'double',
      dropped: 'drop',
      emerged: 'emerge',
      enacted: 'enact',
      ended: 'end',
      escaped: 'escape',
      established: 'establish',
      estimated: 'estimate',
      expected: 'expect',
      expressed: 'express',
      failed: 'fail',
      filed: 'file',
      followed: 'follow',
      formed: 'form',
      freed: 'free',
      frozen: 'freeze',
      generated: 'generate',
      happened: 'happen',
      helped: 'help',
      hosted: 'host',
      imposed: 'impose',
      included: 'include',
      inherited: 'inherit',
      intended: 'intend',
      involved: 'involve',
      joined: 'join',
      killed: 'kill',
      kissed: 'kiss',
      landed: 'land',
      lasted: 'last',
      launched: 'launch',
      listed: 'list',
      measured: 'measure',
      moved: 'move',
      muted: 'mute',
      needed: 'need',
      opened: 'open',
      orbited: 'orbit',
      ordered: 'order',
      planned: 'plan',
      postponed: 'postpone',
      preferred: 'prefer',
      prohibited: 'prohibit',
      proposed: 'propose',
      provided: 'provide',
      ratified: 'ratify',
      received: 'receive',
      recorded: 'record',
      referred: 'refer',
      replaced: 'replace',
      returned: 'return',
      ruled: 'rule',
      scattered: 'scatter',
      secured: 'secure',
      selected: 'select',
      sentenced: 'sentence',
      sold: 'sell',
      specified: 'specify',
      spread: 'spread',
      started: 'start',
      stated: 'state',
      stopped: 'stop',
      studied: 'study',
      succeeded: 'succeed',
      sued: 'sue',
      suffered: 'suffer',
      talked: 'talk',
      taxed: 'tax',
      tested: 'test',
      traced: 'trace',
      treated: 'treat',
      used: 'use',
      verified: 'verify',
      visited: 'visit',
      waged: 'wage',
      worked: 'work',
    };
    // eslint-disable-next-line no-restricted-syntax
    for (const [key, value] of Object.entries(map)) {
      expect(convertPastParticipleToPresent(key)).to.equal(value);
    }
  });
});
